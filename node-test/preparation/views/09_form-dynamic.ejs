<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 폼 전송</title>
    <script
        src="https://code.jquery.com/jquery-3.7.1.min.js"
        integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
        crossorigin="anonymous">
    </script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
    <form name="register">
        <input type="text" name="id" placeholder="ID" title="소문자, 숫자를 이용하여 5글자 이상" pattern="^[a-z0-9]{5,}" required value="eunseo527" />
        <br />
        <input type="password" name="pw" placeholder="password" value="0527" />
        <br />
        <input type="text" name="name" placeholder="이름" required value="손주연" />

        <div>
            <!-- <button type="button" onclick="ajaxGet()">ajax get 전송</button>
            <br />
            <button type="button" onclick="ajaxPost()">ajax post 전송</button>
            <br /> -->
            <button type="button" onclick="axiosGet()">axios get 전송</button>
            <br />
            <button type="button" onclick="axiosPost()">axios post 전송</button>
            <!-- <br />
            <button type="button" onclick="fetchGet()">fetch get 전송</button>
            <br />
            <button type="button" onclick="fetchPost()">fetch post 전송</button> -->
        </div>
        
    </form>
    <h3 id="result"></h3>

    <script>
        function getData() {
            const form = document.forms["register"];

            // if (!form.checkValidity()) { // checkValidity 폼의 유효성 검사를 해서 boolean 값 반환
            //     form.reportValidity(); // reportValidity 유효성 검사를 통과하지 못한 input에 대해 보고함(보고서를 띄움)
            //     // 위 코드가 보고하는 코드일지라도 함수를 멈출 수는 없다.
            //     return false;
            //     // 함수 자체가 리턴을 만나면 다음 코드를 읽지 않는다.
            //     // 유효성 검사가 실패하며 리턴한다. return만 써도 상관 없다.

            // }

            const data = {
                id : form.id.value,
                pw : form.pw.value,
                name : form.name.value,
            }

            return data
        }

        // function ajaxGet() {
        //     const form = document.forms["register"];
        //     // console.dir(form);
        //     // console.dir(form.id);
        //     // console.dir(form.id.value);

        //     const data = getData()
            
        //     $.ajax({
        //         type: 'GET',
        //         url: '/ajax',
        //         // url: `/ajax?id=${data.id}&pw=${data.pw}&name=${data.name}`,
        //         data: data,
        //         success: function (result) {
        //             // console.log(result);
        //             const {
        //                 name
        //             } = result
        //             $("#result").html(`ajax get 요청 성공 ${name}님 환영합니다.`);
        //         }
        //     });
        // };

        // function ajaxPost() {
        //     const data = getData()
            
        //     $.ajax({
        //         type: 'POST',
        //         url: '/ajax',
        //         data: data,
        //         success: function (result) {
        //             console.log(result);
        //             $("#result").html(`ajax post 요청 성공 ${result.name}님 환영합니다.`);
        //         }
        //     });
        // };


        // axios 함수는 promise 객체를 return
        function axiosGet() {
            const data = getData();
            
            axios({
                method: "GET",
                url: "/axios",
                // axios는 get 요청으로 데이터 보낼 때 params에 정보를 담아 보냄
                params: data
                // params 대신 url에 query를 직접 작성해도 됨
            }).then((res)=> {
                // 서버에서 보내준 응답이 res에 담김
                console.log("res:", res);
                console.log("res.data:", res.data);
                const {
                    name
                } = res.data

                $("#result").html(`axios get 요청 성공 ${name}님 환영합니다.`);
            });
        };


        function axiosPost() {
            const data = getData();
            // data 에서 받아오는 값이 false | object (객체 형태)

            axios({
                method: "POST",
                url: "/axios",
                data: data, // post일 경우 서버에 데이터를 보낼 때, data 키에 담아서 보내면 됨.
            }).then((res) => {
                console.log(res.data);
                const {
                    name
                } = res.data
                $("#result").html(`axios post 요청 성공 ${name}님 환영합니다.`);
            });
        };

        // // 프로미스 기반이라 어싴크 어웨이 사용 가능
        // async function axiosPost() {
        //     const data = getData();
        //     // data 에서 받아오는 값이 false | object (객체 형태)

        //     if (!data) return;

        //     const res = await axios({
        //         method: "POST",
        //         url: "/axios",
        //         data: data,
        //     });

        //     console.log("res:", res)
        //     console.log("res.data:", res.data)
        //     $("#result").html(`axios post 요청 성공 ${name}님 환영합니다.`)
        // }
    
        // // 패치도 프로미스 기반이라 어싴크 어웨이 사용 가능
        // // function fetchGet() {
        // //     const data = getData();
        // //     if (!data) return;

        // //     // fatch(url. option 객체)
        // //     // url -> action
        // //     // option 객체에 method가 있음
        // //     // fetch는 method 의 기본값이 GET. 즉 겟방식은 메소드를 안써도 됨
        // //     // 엑시오는 정보를 파람스에 보냈는데 안타깝게 패치는 get요청시 데이터를 무조건 쿼리로 만들어서 url과 함께 전송해야한다
        // //     // const urlQuery = `id=${data.id}&name=${data.name}&pw=${data.pw}`
        // //     // 쿼리 만들기 솔직히 좀 귀찮, 쿼리를 만들어주는 함수
        // //     const urlQuery = new URLSearchParams(data).toString();
        // //     // URLSearchParams는 파라미터를 관리하는 클래스고, toString을 사용하면 문자열로 쿼리 형태가 된다.

        // //     fetch(`/fatch?${urlQuery}`,
            
        // //     )
        // //     // .then((res) => {
        // //     //     console.log("원본", res);
        // //     //     console.log("파싱", res.json());
        // //     // //     return res.json()
        // //     // // }).then((res) => {
        // //     // //     // 위에서 파싱 해서 리턴하고
        // //     // //     console.log(res);
        // //     // })

        // //     const oriRes = await fetch(`/fetch?${urlQuery}`)
        // //     const res = await oriRes.json()
        // //     console.log(res)
        // // }

        // // 원래는 기본값 사용 : application/x-www-form-urlencoded
        // // 하지만, fetch post 요청 시에 기본겂울 사용했을 때 동작을 안함
        // function fetchPost() {
        //     const data = getData()
        //     if (!data) return;

        //     fetch("/fetch", {
        //         method: "POST",
        //         headers: {
        //             "Content-Type": "application/json"
        //             // 문자열에 특수문자 들어가서 키값도 따옴표 사용해야함
        //         },
        //         body: JSON.stringify(data)
        //     }).then((res) => {
        //         return res.json()
        //     }).then((res) => {
        //         console.log(res)
        //         $("#result").html(`fetch post 요청 성공 ${res.name}님 환영합니다.`)
        //     })
            
        // }

    </script>
</body>
</html>