<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>소켓</title>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <!-- <h3>소켓 연습</h3>
    <button onclick="hello()">hello</button>
    <button onclick="entry()">entry</button> -->

    <h3>Hello Wolrd!</h3>
    <button onclick="hello()">hello</button>
    <button onclick="study()">study</button>
    <button onclick="bye()">bye</button>
    <br />
    <div id="box"></div>

    <script>
        // 커넥션은 여기서 일어난다.
        // 지금은 아니지만 주소가 달라지면 io() 괄호 안에 ㅇ쩌구
        const socket = io()
        // 클라이언트에선 socket을 이렇게 열면 된다.
        // 소켓을 이용해 데이터를 전송하는 함수는 : emit 이라는 것이 있다
        // 소켓을 이용해 데이터를 수신하는 함수는 : on 이라는 것이 있다
        // 어떤 데이터가 올지 생각해서 그에 맞게 받는 부분을 만들면 된다

        // function hello() {
        //     // (전송할 이벤트 이름 [, 전송할 데이터])
        //     // 이벤트 이름은 필수, 데이터는 선택이다.
        //     // 전송할 데이터의 형태는 자유롭게 (문자열, 숫자, 객체)
        //     socket.emit("hello", {msg : "안녕하세요~"})
        // }

        // 만약 특정 함수 안에 이벤트을 넣어두면 함수가 실행되는 순간에
        // 이벤트가 실행 되는 것이 아니라 등록이 된다.
        // 즉 함수가 여러번 실행되면 이벤트가 여러번 등록되서
        // 이벤트가 실행되는 조건이 되면 여러개의 이벤트가 동시에 발생한다
        // 콘솔이 여러개 찍힌다던가...
        // 그래서 on("bye"는 hello 함수 밖에 둔 것이다.
        // socket.on("bye", (res)=>{
        //     console.log(res)
        // })

        // function entry() {
        //     socket.emit("entry")
        // }

        // socket.on("notice", (res)=>{
        //     console.log(res.msg)
        // })



        function hello() {
            socket.emit("msg", {msg : "hello: 안녕하세요."})
        }

        function study() {
            socket.emit("msg", {msg : "study: 공부합시다!"})
        }

        function bye() {
            socket.emit("msg", {msg : "bye: 잘가~"})
        }

        socket.on("msgRe", (res)=>{
            const box = document.getElementById('box')
            box.innerHTML=`<div>${res.msg}</div>`

        })
    </script>
</body>
</html>